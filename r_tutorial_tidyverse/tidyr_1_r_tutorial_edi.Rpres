Transform and visualize data in R with "tidyverse" (1)
=======================================================
author:
autosize: true


<style>
.small-code pre code {
  font-size: 1em;
.footer {
    color: red; background: #E8E8E8;
    position: fixed; top: 90%;
    text-align:center; width:100%;
.midcenter {
    position: fixed;
    top: 50%;
    left: 50%;
}
}
}
</style>

<img src="fig1_r_intro.png"></img>

<div class="footer" style="margin-top:300px;font-size:100%;">
Environmental Data Initiative<br />17 October 2017</div>


Tutorial goals
========================================================
<br />
<br />
Introduction to:
- Data tidying using "tidyr"
- Data transformation using "dplyr"
- Data plotting using "ggplot2"

This tutorial focuses on "dplyr" and uses "ggplot2".

Main resources for this tutorial:
========================================================

<br />

"R FOR DATA SCIENCE"
<br />
<br />
by Hadley Wickham and Garrett Grolemund (O'Reilly). Copyright 2017 Garrett Grolemund, Hadley Wickham, 978-1-491-91039-9
<br />

<style>
.small-code pre code {
  font-size: 1em;
.footer {
    color: red; background: #E8E8E8;
    position: fixed; top: 90%;
    text-align:center; width:100%;
.midcenter {
    position: fixed;
    top: 50%;
    left: 50%;
}
}
}
</style>

<img src="r_data_foir_science.png"></img>

<br />
<br />


Main resources for this tutorial (continued):
========================================================
<br />
<br />
Two example data sets from the EDI repository:


- "Rainfall manipulation study vegetation data from the Chihuahuan Desert Grassland and Creosote Shrubland at the Sevilleta National Wildlife Refuge, New Mexico (2003-2011)": https://doi.org/10.6073/pasta/361fbce9ce7d4d9530e34b4a8ee3c02e

-  "Eddy covariance data measured at the CAP LTER flux tower located in the west Phoenix, AZ neighborhood of Maryvale from 2011-12-16 through 2012-12-31": https://doi.org/10.6073/pasta/fed17d67583eda16c439216ca40b0669.

<br />
<br />
<br />
R CHEAT SHEETS: https://www.rstudio.com/resources/cheatsheets/

- Data Transformation Cheat Sheet
- Data Visualization Cheat Sheet

Important dplyr functions for data manipulation
========================================================
<br />
<br />
- SELECT(): select variables - COLUMNS of a data table
- MUTATE(): modify or create new COLUMNS
- FILTER(): filter observations by their values - ROWS of a data table
- ARRANGE(): reorder ROWS of a data table
- SUMMARIZE(): collapse values to a single summary value, for example calculate mean values
- GROUP_BY(): allows to apply function on selected values instead of all data of a column.



========================================================
class: small-code
IMPORT DATA:"Rainfall manipulation study vegetation data from the Chihuahuan Desert Grassland and Creosote Shrubland at the Sevilleta National Wildlife Refuge, New Mexico (2003-2011)"
<br />
https://doi.org/10.6073/pasta/361fbce9ce7d4d9530e34b4a8ee3c02e
<br />
<br />

```{r echo=FALSE}
library(tidyverse)
library(stringr)
```{r}
#
# assign to file1 the path to table and table name
# read table with read_csv and assign to df
# use "<-" as "assign to" command
#
file1 <- "sev147_droughtveg_11142011.csv"
df1 <- read_csv(file1)
#
# list the data structure
#
df1
```

Questions we might ask about the data set
========================================================
class: small-code
<br />
<br />
- What is the total "Species" "Count" in a particular "Year" at each of the three "Sites"?
- How does the "Count" of a particular "Species" change over the "Years" at a particular "Site"?
- Are there differences in "Species" "Count" by season?
<br />
<br />
<br />
Column names of data frame are given in quotation marks.
<br />

Select columns: select()
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r}
# 
# Select columns of interest for data analysis.
#
t1 <-  select(df1, Date, Season, Site, Plot, Species, Count, Year)
t1
```
<br />
<br />

Plot with ggplot and geom_point
========================================================
class: small-code
<br />
ggplot(data=DATA)+geom_function(mapping=aes(MAPPINGS))
<br />
```{r fig.width=16 , fig.height=10, fig.align='center'}
#
# plot "Count" vs."Date" & NOTICE DIFFERENT MISSING VALUES! 
#
p <- ggplot(t1) + geom_point(mapping = aes(x=Date,y=Count))
p
```

Modify column values: mutate() & pipe command %>%
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r}
#
# assign NA to missing values in column "Count"
# substitute "SPRING(YEAR)" and "FALL(YEAR)" in column "Season" with "SPRING" and "FALL"
# change data type of column "Plot" from INTEGER to CHARACTER for use as categorical variable
#
t2 <- mutate(t1,Count = replace(Count, which(Count==-888|Count== -999),NA)) %>%  
       mutate(Season=ifelse(str_sub(Season,1,1)=="S","SPRING","FALL")) %>% 
       mutate(Plot = as.character(Plot),Year = as.character(Year))
t2

```

Arrange order of rows:arrange()
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r}
#
# arrange rows in order of descending values of column "Count"
#
arrange(t2, desc(Count))
```


Filter rows by value: filter()
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r}
#
# What is the total "Species" "Count" in a particular "Year" at each of the three "Sites"?
#
# filter all values for the year 2010
#
t3 <- filter(t2, Year==2010)
t3


```


Filter rows with values for multiple variables: filter()
========================================================
class: small-code
```{r echo=FALSE}
```{r fig.width=18 , fig.height=10, fig.align='center'}
#
# How does the "Count" of a particular "Species" change over the "Years" at a particular "Site"?
#
# filter all values for site "G" and species "Astragalus missouriensis Nutt. var. mimetes Barneby"
#
t4 <- filter(t2, Site=="G", Species=="ASMIM")
t4

```

Plot with ggplot, geom_col and theme(axis and title)
========================================================
class: small-code
```{r echo=FALSE}
```{r fig.width=16 , fig.height=8, fig.align='center'}
#
# for reference: http://ggplot2.tidyverse.org/reference/theme.html
#
p <- ggplot(t4) + geom_col(mapping = aes(x=Year,y=Count)) +
#  
# aesthetic modifications to base plot
#
     theme(axis.title.y = element_text(size = rel(3.0))) +
     theme(axis.title.x = element_text(size = rel(3.0))) +
     theme(axis.text.y = element_text(size = rel(2.5))) +
     theme(axis.text.x = element_text(size = rel(2.5))) +
     ggtitle("Astragalus missouriensis at site G") +
     theme(plot.title = element_text(size = rel(3.5)))
p

```

Plot with ggplot, geom_col and facet_wrap
========================================================
class: small-code
```{r echo=FALSE}
```{r fig.width=18 , fig.height=10, fig.align='center'}
#
# for reference: http://ggplot2.tidyverse.org/reference/theme.html
#
#Are there differences in "Species" "Count" by season?
#
p <- p + facet_wrap(~Season) +
#  
# aesthetic modifications to base plot
#
     theme(strip.text = element_text(size=24, face="bold"))
p

```


Group and summarize:group_by() and summarize()
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r fig.width=18 , fig.height=10, fig.align='center'}
#
# filter species that begin with the letter "A"
# group data by site, plot and species
# calculate mean number of species for each group
#
t5 <- filter(t2,str_sub(Species,1,1)=="A") %>%
       group_by(Site,Plot,Species) %>%
       summarize(count_mean=mean(Count,na.rm=TRUE)) 
t5

```

Plot with ggplot, geom_col and facet_grid
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r fig.width=18 , fig.height=8, fig.align='center'}

ggplot(t5) + geom_col(mapping = aes(x=Species,y=count_mean,fill=Species)) + 
                facet_grid(Site~Plot) +
#
                theme(axis.text.x=element_blank(),axis.title.x=element_blank(),axis.ticks.x=element_blank())
  
```

========================================================
class: small-code
IMPORT DATA:"Eddy covariance data measured at the CAP LTER flux tower located in the west Phoenix, AZ neighborhood of Maryvale from 2011-12-16 through 2012-12-31"
<br />
https://doi.org/10.6073/pasta/fed17d67583eda16c439216ca40b0669.
<br />
<br />

```{r echo=FALSE}
library(stringr)
library(lubridate)
```{r}
#
# assign path to table and table name to file2
# read table with read_csv and assign to dt_cap
# use "<-" as "assign to" command
#
file2 <- "591_fluxtower_data_a16dafefa6836b419580f353b76bc2a0.csv"
df2 <- read_csv(file2)
#
# list the data structure
#
df2
```


Determine daily averages/cummulative values of weather data
========================================================
class: small-code
```{r echo=FALSE}
```{r}
#
# select and rename column names for weather variables
#
weather <- select(df2,TIMESTAMP,"Day of Year","Local Time",K_inc,t_hmp_mean,Rain,RH,VPD,wnd_spd) %>% 
           rename(Day = "Day of Year") %>% 
           mutate(day = as.character(Day))
weather
```

Determine daily averages/cummulative values of weather data
========================================================
class: small-code
```{r echo=FALSE}
```{r}
#
# aggregate 30-minute air temperatures into average daily values of month (group_by month, Day)
#
daily_weather <- group_by(weather,day) %>% 
  summarize(T_daily=mean(t_hmp_mean),na.rm=TRUE) %>% 
  mutate(Day = as.integer(day)) %>% 
  arrange(Day)

daily_weather
```


Plot daily mean air temperature
========================================================
class: small-code
```{r echo=FALSE}
```{r fig.width=16, fig.height=8, fig.align='center'}
ggplot(daily_weather,mapping = aes(x=Day,y=T_daily))+geom_point() +
      geom_smooth() +
     ggtitle("Daily mean air temperature") +
     theme(axis.title.y = element_text(size = rel(3.0))) +
     theme(axis.title.x = element_text(size = rel(3.0))) +
     theme(axis.text.y = element_text(size = rel(3.0))) +
     theme(axis.text.x = element_text(size = rel(3.0))) +
     theme(plot.title = element_text(size = rel(3.0)))

```


Select columns and rename colums: select() and rename()
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r}
t_flux <- select(df2,TIMESTAMP,"Q*_corr",Hc_c,LE_wpl_c,Residual_c) %>% 
          rename(Rn = "Q*_corr",H=Hc_c,LE=LE_wpl_c,G=Residual_c)
t_flux
```

Access individual time components with package lubridate
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r}
#
# assign values of column TIMESTAMP to datetime vector in format ymd_hms
#
datetime <- ymd_hms(t_flux$TIMESTAMP)
#
# use mutate() to create new colums for "Date", "Year","Month", "Day", "Hour"
# drop column TIMESTAMP
# rearrange order of colums
#
fluxes <- mutate(t_flux,Date=date(datetime),Year=year(datetime),
          Month=month(datetime),Day=mday(datetime),Hour=hour(datetime)) %>%
          select(-(TIMESTAMP))
fluxes
```

Group and summarize:group_by() and summarize()
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r}
#
# Question: What are average hourly values (daily courses) of the surfce energy fluxes by month?
#
fluxes_avg <- group_by(fluxes,Month,Hour) %>% 
              summarize(Rn_avg=mean(Rn,na.rm=TRUE),
                        H_avg=mean(H,na.rm=TRUE),
                        LE_avg=mean(LE,na.rm=TRUE),
                        G_avg=mean(G,na.rm=TRUE)) %>% 
              ungroup()
fluxes_avg
```

Plot with ggplot, geom_line, facet_wrap
========================================================
class: small-code
<br />
<br />
```{r echo=FALSE}
```{r fig.width=18 , fig.height=10, fig.align='center'}
#
# for information on saving plots to files see here: http://rfunction.com/archives/812
# save plot as pdf file
#
#pdf("plot_energy_fluxes.pdf", paper="USr", width=15, height=10)
#
p <- ggplot(fluxes_avg,aes(x=Hour)) + 
     geom_line(aes(y=Rn_avg,color = "Rn_avg")) +
     geom_line(aes(y=H_avg,color = "H_avg")) +
     geom_line(aes(y=LE_avg,color = "LE_avg")) +
     geom_line(aes(y=G_avg,color = "G_avg")) +
     scale_colour_manual("", 
                      breaks = c("Rn_avg", "H_avg", "LE_avg","G_avg"),
                      values = c("Rn_avg"="red", "H_avg"="green",  
                                 "LE_avg"="blue","G_avg"="brown")) +
     facet_wrap(~Month) +
     ylab(expression(paste("surface energy flux (Wm"^{-2}*")"))) +
     scale_x_continuous(breaks=c(0,6,12,18)) +
#     scale_y_continuous("surface energy flux (Wm"^{-2}*")", limits = c(-100,400)) + 
     labs(title="Fluxes")
#   Change facet labels with labeller = as_labeller(new_names)
     month_name <- c('1'= "January",'2' = "February",'3'= "March",
                '4' = "April",'5' = "May", '6' = "June",
                '7' = "July",'8' = "August",'9' = "September",
                '10' = "October", '11' = "November", '12' = "December")
p <- p+facet_wrap(~Month,labeller = as_labeller(month_name))
#
#                 
#dev.off()                          # close pdf file
#
```


Plot
========================================================
```{r echo=FALSE}
```{r fig.width=18 , fig.height=10, fig.align='center'}
p
```




Thank you for your attention!
========================================================
<img src="fig1_r_intro.png"></img>
